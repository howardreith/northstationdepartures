{"version":3,"sources":["components/mbtaBoard/Clock.js","utils/fetchAndFormatPredictionData.js","components/mbtaBoard/MbtaBoardPage.js","resources/northSationBackground.jpeg","App.js","index.js"],"names":["useStyles","makeStyles","clockText","color","margin","Clock","props","useState","Date","value","setValue","isTime","classes","useEffect","interval","setInterval","clearInterval","time","toLocaleTimeString","hour","minute","replace","dayOfWeek","getDay","date","toLocaleDateString","Box","className","apiKey","process","fetchAndFormatPredictionData","scheduleData","a","data","fetch","response","json","forEach","datum","key","id","stopData","relationships","stop","split","attributes","departure_time","departureTime","name","destination","route","status","trainNumber","vehicle","trackNumber","length","Object","values","sort","b","boxContainer","backgroundColor","marginLeft","marginRight","marginTop","table","minWidth","tableHeading","paddingTop","paddingBottom","borderBottom","mainHeading","marginBottom","tableCell","fontFamily","fontSize","MbtaBoardPage","setData","useRef","then","res","current","catch","err","console","error","display","width","paddingLeft","textAlign","paddingRight","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","map","row","appWrapper","backgroundImage","backgroundRepeat","backgroundSize","height","position","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88477c76.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  makeStyles, Box,\n} from '@material-ui/core';\nimport * as PropTypes from 'prop-types';\n\nconst useStyles = makeStyles({\n  clockText: {\n    color: 'gold',\n    margin: 0,\n  },\n});\n\nexport default function Clock(props) {\n  const [value, setValue] = useState(new Date());\n  const { isTime } = props;\n  const classes = useStyles();\n\n  useEffect(() => {\n    const interval = setInterval(\n      () => setValue(new Date()),\n      1000,\n    );\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  let time = value.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  if (time[0] === '0') {\n    time = time.replace('0', '');\n  }\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const dayOfWeek = days[value.getDay()];\n  const date = value.toLocaleDateString().replace(/\\//g, '-');\n\n  if (isTime) {\n    return (\n      <Box>\n        <p className={classes.clockText} data-test-id=\"currentTimeHeader\">CURRENT TIME</p>\n        <p className={classes.clockText} data-test-id=\"time\">\n          {time}\n        </p>\n      </Box>\n    );\n  }\n  return (\n    <Box>\n      <p className={classes.clockText} data-test-id=\"dateOfWeek\">{dayOfWeek}</p>\n      <p className={classes.clockText} data-test-id=\"currentDate\">\n        {date}\n      </p>\n    </Box>\n  );\n}\n\nClock.propTypes = {\n  isTime: PropTypes.bool.isRequired,\n};\n","const apiKey = process.env.REACT_APP_API_KEY;\n\nexport default async function fetchAndFormatPredictionData(scheduleData) {\n  const data = {};\n  const response = await fetch(`https://api-v3.mbta.com/predictions/?api_key=${apiKey}&sort=departure_time&direction_id=0&stop=place-north&route=CR-Fitchburg,CR-Haverhill,CR-Lowell,CR-Newburyport,CR-Greenbush,CR-Middleborough,CR-Kingston,CR-Fairmount,CR-Franklin,CR-Worcester,CR-Providence,CR-Needham`);\n  const responseJson = await response.json();\n  responseJson.data.forEach((datum) => {\n    const key = datum.id.replace('prediction-', '');\n    data[key] = {};\n    const stopData = datum.relationships.stop.data.id.split('-');\n    if (datum.attributes.departure_time) {\n      data[key].departureTime = datum.attributes.departure_time;\n    } else if (scheduleData && scheduleData[key]) {\n      data[key].departureTime = scheduleData[key].departureTime;\n    } else {\n      // The train has departed, probably quite a while ago\n      delete data[key];\n    }\n    if (data[key]) {\n      data[key].name = key;\n      data[key].destination = datum.relationships.route.data.id.replace('CR-', '');\n      data[key].status = datum.attributes.status;\n      data[key].trainNumber = (datum.relationships.vehicle.data\n            && datum.relationships.vehicle.data.id) || 'TBD';\n      data[key].trackNumber = stopData.length > 2 ? stopData[2] : 'TBD';\n    }\n  });\n  return Object.values(data).sort((a, b) => (\n    new Date(a.departureTime)) - (new Date(b.departureTime)));\n}\n","import React, { useEffect, useState, useRef } from 'react';\nimport {\n  TableContainer, Table, TableHead, TableRow, TableCell, TableBody, makeStyles, Box,\n} from '@material-ui/core';\nimport Clock from './Clock';\nimport fetchAndFormatPredictionData from '../../utils/fetchAndFormatPredictionData';\n\nconst useStyles = makeStyles({\n  boxContainer: {\n    backgroundColor: 'black',\n    marginLeft: '20px',\n    marginRight: '20px',\n    marginTop: '20px',\n  },\n  table: {\n    minWidth: 650,\n  },\n  tableHeading: {\n    color: 'gray',\n    paddingTop: '2px',\n    paddingBottom: '2px',\n    borderBottom: '1px solid darkgray',\n  },\n  mainHeading: {\n    color: 'gray',\n    marginTop: 0,\n    marginBottom: 0,\n  },\n  tableCell: {\n    color: 'gold',\n    fontFamily: 'Lucida Console',\n    fontSize: '16px',\n    paddingTop: '2px',\n    paddingBottom: '2px',\n    borderBottom: '1px solid darkgray',\n  },\n});\n\nexport default function MbtaBoardPage() {\n  const [data, setData] = useState(null);\n  const scheduleData = useRef({});\n  const classes = useStyles();\n  const apiKey = process.env.REACT_APP_API_KEY;\n\n  useEffect(() => {\n    // Prediction data is missing some info. Retrieve schedule data so it is there if necessary\n    fetch(`https://api-v3.mbta.com/schedules/?api_key=${apiKey}&sort=departure_time&direction_id=0&stop=place-north&route=CR-Fitchburg,CR-Haverhill,CR-Lowell,CR-Newburyport,CR-Greenbush,CR-Middleborough,CR-Kingston,CR-Fairmount,CR-Franklin,CR-Worcester,CR-Providence,CR-Needham`)\n      .then((res) => res.json())\n      .then((res) => {\n        res.data.forEach((datum) => {\n          const key = datum.id.replace('schedule-', '');\n          scheduleData.current[key] = {};\n          scheduleData.current[key].departureTime = datum.attributes.departure_time;\n          scheduleData.current[key].destination = datum.relationships.route.data.id.replace('CR-', '');\n        });\n      })\n      .then(() => {\n        fetchAndFormatPredictionData(scheduleData.current).then((res) => {\n          setData(res);\n        });\n      })\n      .catch((err) => {\n        // eslint-disable-next-line no-console\n        console.error('An error occurred fetching data from MBTA API: ', err);\n      });\n  }, []);\n\n  useEffect(() => {\n    // MBTA has a streaming API for real-time detailed updates, but it's far more data\n    // than we need. Periodically polling the relevant endpoint is sufficient. For info on\n    // streaming, see https://www.mbta.com/developers/v3-api/streaming\n    const interval = setInterval(\n      async () => {\n        const res = await fetchAndFormatPredictionData(scheduleData.current);\n        return setData(res);\n      }, 10000,\n    );\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  return (\n    <Box className={classes.boxContainer}>\n      <Box display=\"flex\" width=\"100%\" paddingTop=\"15px\">\n        <Box paddingLeft=\"15px\">\n          <Clock isTime={false} />\n        </Box>\n        <Box marginLeft=\"auto\" textAlign=\"center\">\n          <h1 className={classes.mainHeading}>North Station Information</h1>\n        </Box>\n        <Box paddingRight=\"15px\" marginLeft=\"auto\">\n          <Clock isTime />\n        </Box>\n      </Box>\n      <TableContainer>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.tableHeading} align=\"center\">Carrier</TableCell>\n              <TableCell className={classes.tableHeading} align=\"center\">Time</TableCell>\n              <TableCell className={classes.tableHeading} align=\"center\">Destination</TableCell>\n              <TableCell className={classes.tableHeading} align=\"center\">Train#</TableCell>\n              <TableCell className={classes.tableHeading} align=\"center\">Track</TableCell>\n              <TableCell className={classes.tableHeading} align=\"center\">Status</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data && data.map((row) => {\n              let time = new Date(row.departureTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n              if (time[0] === '0') {\n                time = time.replace('0', '');\n              }\n              return (\n                <TableRow key={row.name} data-test-id={`${row.name}-row`} data-test-type=\"departureRow\">\n                  <TableCell key={`${row.name}-carrier`} data-test-id={`${row.name}-carrier`} className={classes.tableCell} align=\"left\">MBTA</TableCell>\n                  <TableCell key={`${row.name}-departureTime`} data-test-id={`${row.name}-departureTime`} className={classes.tableCell} align=\"left\">{time}</TableCell>\n                  <TableCell key={`${row.name}-destination`} data-test-id={`${row.name}-destination`} className={classes.tableCell} align=\"left\">{row.destination}</TableCell>\n                  <TableCell key={`${row.name}-trainNumber`} data-test-id={`${row.name}-trainNumber`} className={classes.tableCell} align=\"left\">{row.trainNumber}</TableCell>\n                  <TableCell key={`${row.name}-trackNumber`} data-test-id={`${row.name}-trackNumber`} className={classes.tableCell} align=\"left\">{row.trackNumber}</TableCell>\n                  <TableCell key={`${row.name}-status`} data-test-id={`${row.name}-status`} className={classes.tableCell} align=\"left\">{row.status}</TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/northSationBackground.19baa4d7.jpeg\";","import React from 'react';\nimport './App.css';\nimport {\n  Box, makeStyles,\n} from '@material-ui/core';\nimport MbtaBoardPage from './components/mbtaBoard/MbtaBoardPage';\nimport backgroundImage from './resources/northSationBackground.jpeg';\n\nconst useStyles = makeStyles({\n  appWrapper: {\n    backgroundImage: `url(${backgroundImage})`,\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: '100% 100%',\n    height: '100vh',\n    width: '100%',\n    margin: 0,\n    position: 'fixed',\n  },\n});\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <Box className={classes.appWrapper}>\n      <Box>\n        <MbtaBoardPage />\n      </Box>\n    </Box>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}